{"name":"Canon-iris-control","tagline":"Arduino Iris Control for Canon XLH1","body":"/*  REMOTE IRIS CONTROL FOR CANNON XLH1\r\n    VERSION DELIVERED 2013.01.11\r\n    ENCtest22\r\n    */\r\n\r\n\r\n#include <Encoder.h>                            // encoder library\r\n#include <Servo.h>                              // servo library\r\n//  CAMERA A\r\nServo myCamAservo;                              // create servo object to control a servo A\r\nint valCamA;                                    // variable to read the valCamA from the ENCODER\r\nEncoder camAenc(18, 19);                        // pin 18, 19 (2,3,18,19,20,21) is one of the interrupt pins on the MEGA2560\r\n//  CAMERA B\r\nServo myCamBservo;                              // create servo object to control a servo B\r\nint valCamB;                                    // variable to read the valCamB from the ENCODER\r\nEncoder CamBenc(20, 21);                        // pin 20, 21 is one of the interrupt pins on the MEGA2560\r\nvoid setup() {\r\n  Serial.begin(9600);\r\n  Serial.println(\"Basic Encoder Test:\");\r\n  myCamAservo.attach(12);                       // attaches the servo on pin 12 to the servo object AND feeds input of CMOS voltage level shifter\r\n  myCamAservo.attach(11);\r\n  myCamBservo.attach(10);                       // attaches the servo on pin 10 to the servo object AND feeds input of CMOS voltage level shifter \r\n  myCamBservo.attach(9);\r\n  pinMode(38, OUTPUT);                          // LED on encoder  +  A\r\n  pinMode(40, OUTPUT);                          // LED on encoder  +  B\r\n  pinMode(11, OUTPUT);                          // CMOS - TTL SELECT - PIN 13 ON IC cd4504b    \r\n  digitalWrite(11, HIGH);                       // CMOS - TTL SELECT - PIN 13 ON IC cd4504b  HIGH FOR CMOS LEVELS \r\n                                                // change to LOW stopped EncA from interfering with ServoB\r\n                                                // set to LOW for USB power and HIGH for EXT power\r\n}\r\nlong oldCamApos  = -999;                        // storage of previous CamA encoder position\r\nint posDiffCamA = 0;                            // difference of new and old position\r\nint speedCamA = -5;                             // speed or sensitivity CHANGE TO NEGATIVE VALUE TO REVERSE DIRECTION\r\nint servoStopCamA = 1534;                       // PURPLE  center/stopped position in microseconds NEEDS TO BE SET FOR EACH SERVO  1539\r\nlong oldCamBpos  = -999;                        // storage of previous CamB encoder position\r\nint posDiffCamB = 0;                            // difference of new and old position\r\nint speedCamB = 5;                              // speed or sensitivity CHANGE TO NEGATIVE VALUE TO REVERSE DIRECTION\r\nint servoStopCamB = 1205;                       // RED center/stopped position in microseconds was 1510 1538   1215                1210\r\n                                                // change to 1211 stopped EncA from interfering with ServoB                                                \r\nvoid loop() {\r\n  long newCamApos = camAenc.read();             // read position of camera A encoder\r\n  posDiffCamA = (newCamApos - oldCamApos) * speedCamA;  // speed or sensitivity calculator\r\n  long newCamBpos = CamBenc.read();             // read position of camera B encoder\r\n  posDiffCamB = (newCamBpos - oldCamBpos) * speedCamB;  // speed or sensitivity calculator\r\n  if (newCamApos != oldCamApos  || \r\n      newCamBpos != oldCamBpos )                // check to see if encoder has moved\r\n  {              \r\n    myCamAservo.attach(12);\r\n    myCamBservo.attach(10);\r\n    digitalWrite(38, LOW);                      // +V  LED on encoder A\r\n    digitalWrite(40, LOW);                      // +V  LED on encoder B\r\n    oldCamApos = newCamApos;                    // update old to new value\r\n    oldCamBpos = newCamBpos;                    // update old to new value\r\n    valCamA = (posDiffCamA + servoStopCamA);    // calculate offset for individual motor stopped value\r\n    valCamB = (posDiffCamB + servoStopCamB);    // calculate offset for individual motor stopped value \r\n    Serial.println(valCamA);\r\n    Serial.println(valCamB);\r\n    delay(150);                                 // amount of time the servo runs at speed or LATENCY\r\n  }\r\n  else\r\n  {\r\n   digitalWrite(38, HIGH);                      // +V  LED on encoder A\r\n   digitalWrite(40, HIGH);                      // +V  LED on encoder B\r\n    valCamA = servoStopCamA;                    // stops the servoA \r\n    myCamAservo.attach(11);\r\n    valCamB = servoStopCamB;                    // stops the servoB\r\n    myCamBservo.attach(9);\r\n  }\r\n  myCamAservo.writeMicroseconds(valCamA);       \r\n  myCamBservo.writeMicroseconds(valCamB);\r\n}\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}